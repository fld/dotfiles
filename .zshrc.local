export EDITOR=vim
export HISTSIZE=1000000
export SAVEHIST=1000000
hash nproc &&
    export DEB_BUILD_OPTIONS="parallel=$(nproc)"

# Path
[ -e "$HOME/bin" ] &&
    export PATH="$HOME/bin:$PATH"
[ -e "$HOME/.local/bin" ] &&
    export PATH="$HOME/.local/bin:$PATH"
[ -e "$HOME/dotfiles/bin" ] &&
    export PATH="$HOME/dotfiles/bin:$PATH"
[ -e "$HOME/.emacs.d/bin" ] &&
    export PATH="$HOME/.emacs.d/bin:$PATH"
# Custom / machine specific
[ -e "$HOME/main/bin" ] &&
    export PATH="$HOME/main/bin:$PATH"
[ -e /usr/ha/bin ] &&
    export PATH="/usr/ha/bin:$PATH"

# Hostname-based prompt colors for grml zsh
source $HOME/dotfiles/bin/grml-zsh-prompt-colors.sh

# Libvirt
[[ $(hostname) == 'main' ]] &&
    export LIBVIRT_DEFAULT_URI='qemu:///system'

# OTPW
if [ "$SSH_TTY" -a -f $HOME/.otpw ]; then
  PW_LINES=$(wc -l <$HOME/.otpw)
  PW_USED=$(grep -- ---- $HOME/.otpw | wc -l)
  echo "OTPW: $PW_USED/`echo $PW_LINES-2 | bc` used"
fi

# zinit
export ZINIT_HOME=$HOME/.zinit
if [[ ! -e $ZINIT_HOME/zinit.zsh ]]; then
    if [[ ! -w $HOME ]]; then
        echo "zinit: ERROR: $HOME not writable. Stopping installation!"
    else
        git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME" ||
            echo "zinit: ERROR: git cloning zinit failed! Stopping installation!"
    fi
fi
source "$ZINIT_HOME/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
zinit snippet OMZP::git # oh-my-zsh git aliases
zinit light tmux-plugins/tpm # tmux plugin manager
zinit load micrenda/zsh-nohup # ^h for backgrounding
zinit load MichaelAquilina/zsh-you-should-use # Remind about aliases
zinit load zdharma-continuum/history-search-multi-word # better ^r search
zinit load zsh-users/zsh-syntax-highlighting # Color prompt

# Autojump
[ -e /usr/share/autojump/autojump.sh ] &&
    source /usr/share/autojump/autojump.sh

# tmux title -wrapper for ssh
ssh() {
    if [[ $(ps -p $(ps -p $$ -o ppid=) -o comm=) =~ tmux ]]; then
        tmux set-window-option allow-rename off
        tmux rename-window "$(echo $* | rev | cut -d ' ' -f1 | rev | cut -d . -f 1)"
        command ssh "$@"
        tmux set-window-option allow-rename on
    else
        command ssh "$@"
    fi
}

# TODO/W-I-P: dotfiles binding -wrapper for systemd-nspawn
ns_dotfiles=("--bind-ro=$HOME/dotfiles" "--bind-ro=$HOME/.zplug")
for f in $HOME/dotfiles/.*; do
    [[ $f != */@(.|..) && $f -ef $HOME/${f##*/} ]] &&
        ns_dotfiles+=("--bind-ro=$f:$HOME/${f##*/}")
done
systemd-nspawn-wip() { command sudo systemd-nspawn ${^ns_dotfiles} $@; } # man zshexpn(1) ${^spec}

# Custom functions
doc() { [[ -d "/usr/share/doc/$1" ]] && vim "/usr/share/doc/$1" || ls -lh /usr/share/doc/$1*; }
mkalias() { name=$1;shift;echo "alias $name='$*'" >> ~/.zshrc.local;source ~/.zshrc.local;tail -n1 ~/.zshrc.local; }
bgp() { $@ &>/dev/null & disown; }
title() { echo -en "\033]2;$1\007"; }
fe() { find . -iname '*'"$1"'*' -exec $2 {} \; ; }  # find a file and run $2 on it
inotifylist() { sudo ps -p $(find /proc/*/fd/* -type l -lname 'anon_inode:inotify' -print 2> /dev/null | sed -e 's/^\/proc\/\([0-9]*\)\/.*/\1/') }
backuppcwatch() { sudo watch 'lsof -n -u backuppc | egrep " (REG|DIR) " | egrep -v "( (mem|txt|cwd|rtd) |/LOG)" | awk "{print $9}"; df -h'; }
iommugroups() {
    find /sys/kernel/iommu_groups -maxdepth 1 -mindepth 1 -type d -exec \
        bash -c 'i="$1"; echo "### Group ${i##*/} ###";
        for j in "$i/devices/"*; do echo -n "    ";
            lspci -s "${j##*/}"; done' _ {} \;
}
dotfiles-push() {
    (( $# <= 1 )) || return 1
    cd ~/dotfiles || exit 1
    git status; read "?Press any key to continue..."
    git commit -a --allow-empty-message -m "$1"
    gp; cd -; source ~/.zshrc.local
}

# Generic aliases
alias c='clear'
alias ta='tmux attach'
alias Â grep='grep'
alias units='units -o %.20g'
alias dfc='df -Ph | column -t'
alias dfh='df -lh | grep -v -e tmpfs -e udev | sort -hk2; comm --nocheck-order -13 <(df -lh) <(df -h)'
alias dfha='df -lh | sort -hk2; comm -13 <(df -lh) <(df -h)'
alias dfhu='df -lh | grep -v -e tmpfs -e udev | sort -hk5; echo -; comm --nocheck-order -13 <(df -lh) <(df -h) | sort -hk5'
alias aliases='grep -e "^alias" ~/.bashrc ~/.zshrc ~/.zshrc.local'
alias lvvgs='(sudo pvs; sudo vgs; sudo lvs) 2>&1 | grep -v "No such device"'
alias lsscsifull='(lsscsi -H; lsscsi; lsscsi -dl)'
alias lsblk='sudo lsblk'
alias blkid='sudo blkid'

# Stats aliases
alias d1='sudo dmesg -Tw'
alias d2='sudo multitail /var/log/syslog'
alias swappers='smem -k -s swap'
alias audittail='sudo multitail /var/log/audit/audit.log'
alias aa-logprof-auditlog='sudo aa-logprof -f <(sudo aa-decode <(sudo cat /var/log/audit/audit.log /var/log/audit/audit.log.1))'
alias kernlogwatchmdstat='watch -n1 "sudo dmesg -T | tail -n 15;cat /proc/mdstat;grep "." /sys/block/md?/md/mismatch_cnt"'

# Networking aliases
alias ports='netstat -tulanp'
alias firewall='sudo /sbin/iptables -L -n -v --line-numbers'
alias smblistusers='sudo pdbedit -L -v'
alias cifsumount='sudo umount -a -t cifs -l'

# Debian aliases
alias apt-frankensteins='apt-show-versions | grep -e "testing" -e "unstable" -e "/sid" -e "*manually*" -e "No available" -e "newer than"'
alias apt-backports='apt-show-versions | grep backports'
alias apt-show-holds='dpkg --get-selections | grep hold'
alias apt-confask='sudo apt install --reinstall -o Dpkg::Options::="--force-confask"'
alias apt-purgerc='sudo apt purge $(dpkg -l | awk "/^rc/ { print $2 }")'
alias apt-get-no-proxy='apt-get -o Acquire::http::Proxy=false'
alias update-initramfs-running='sudo update-initramfs -u -k "$(uname -r)"'
alias screen-grml='screen -c .screenrcgrml'
alias dpkg-dist-list='find /etc/ -name "*.dpkg-dist" -o -name "*.dpkg-new" -o -name "*.dpkg-old" -o -name "*.ucf-dist" -o -name "*.ucf-new" -o -name "*.ucf-old" | sort'
alias dpkglistgrep='dpkg -l | grep'
alias aga='sudo apt-get autoremove'
alias agp='sudo apt-get purge'
alias aga2='sudo apt-get purge $(deborphan); sudo apt-get autoremove; sudo apt-get autoclean'
alias aga3='sudo apt-get purge $(deborphan --find-config --libdevel); sudo apt-get purge $(deborphan --guess-all); sudo apt-get autoremove; sudo apt-get autoclean'
alias aga4='agp $(apt-frankensteins | cut -f1 -d " ")'
alias agbd='sudo apt-get build-dep'
alias awhy='aptitude why'
alias aptchanges='aptitude changelog'

# System aliases
alias failedunits='sudo systemctl --all | grep failed'
alias maskedunits='sudo systemctl list-units --all | grep masked'
alias udevreload='sudo udevadm control --reload'
alias usbsmartctl='sudo smartctl -T permissive -d sat'
alias ntp-update='sudo systemctl stop ntp; sudo ntpd -gq; sudo systemctl start ntp'

# NAS aliases
alias mdd0='sudo mdadm -D /dev/md0'
alias mdd1='sudo mdadm -D /dev/md1'
alias mdd2='sudo mdadm -D /dev/md2'
alias mdd3='sudo mdadm -D /dev/md3'
alias mdd4='sudo mdadm -D /dev/md4'
alias mdd5='sudo mdadm -D /dev/md5'
alias mdd='sudo mdadm --detail'
alias mde='sudo mdadm --examine'
alias mdx='sudo mdadm --examine-bitmap'
alias mdb='sudo mdadm --examine-badblocks'
alias mismatches='grep "." /sys/block/md?/md/mismatch_cnt'
alias alignments='grep "." /sys/block/*/alignment_offset'
alias repairarrays='sudo tee /sys/block/md?/md/sync_action <<< repair'
alias checkarrays='sudo tee /sys/block/md?/md/sync_action <<< check'
alias idlearrays='sudo tee /sys/block/md?/md/sync_action <<< idle'
alias poweronhours='for d in /dev/sd?; do echo -n $d; sudo smartctl -A $d | grep Power_On; done'

# Shell management aliases
alias sourcezshrc='source ~/.zshrc'
alias zshrc='vim ~/.zshrc.local;sourcezshrc'
alias update-grml-zshrc='wget -O ~/dotfiles/.zshrc.new https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc; vimdiff ~/.zshrc ~/dotfiles/.zshrc.new && mv ~/dotfiles/.zshrc ~/dotfiles/.zshrc.old && mv ~/dotfiles/.zshrc.new ~/dotfiles/.zshrc'
alias update-zinit='zinit update'
alias update-tpm='~/.tmux/plugins/tpm/bin/update_plugins all'
alias update-vim='echo "To update vim-plug: Run Vim. Use \":PlugUpgrade | :PlugUpdate\""'
alias update-dotfiles='git -C ~/dotfiles pull origin master; sourcezshrc'
alias dotfiles-update='update-dotfiles'

# Appended aliases (mkalias())
